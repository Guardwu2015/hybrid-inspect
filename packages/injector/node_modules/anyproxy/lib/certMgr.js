'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var util = require('./util');
var EasyCert = require('node-easy-cert');
var co = require('co');

var options = {
  rootDirPath: util.getAnyProxyPath('certificates'),
  defaultCertAttrs: [{ name: 'countryName', value: 'CN' }, { name: 'organizationName', value: 'AnyProxy' }, { shortName: 'ST', value: 'SH' }, { shortName: 'OU', value: 'AnyProxy SSL Proxy' }]
};

var easyCert = new EasyCert(options);
var crtMgr = util.merge({}, easyCert);

// rename function
crtMgr.ifRootCAFileExists = easyCert.isRootCAFileExists;

crtMgr.generateRootCA = function (cb) {
  doGenerate(false);

  // set default common name of the cert
  function doGenerate(overwrite) {
    var rootOptions = {
      commonName: 'AnyProxy',
      overwrite: !!overwrite
    };

    easyCert.generateRootCA(rootOptions, function (error, keyPath, crtPath) {
      cb(error, keyPath, crtPath);
    });
  }
};

crtMgr.getCAStatus = /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
  return _regenerator2.default.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt('return', co( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var result, ifExist;
            return _regenerator2.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    result = {
                      exist: false
                    };
                    ifExist = easyCert.isRootCAFileExists();

                    if (ifExist) {
                      _context.next = 6;
                      break;
                    }

                    return _context.abrupt('return', result);

                  case 6:
                    result.exist = true;

                    if (/^win/.test(process.platform)) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 10;
                    return easyCert.ifRootCATrusted;

                  case 10:
                    result.trusted = _context.sent;

                  case 11:
                    return _context.abrupt('return', result);

                  case 12:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, this);
          })));

        case 1:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this);
});

module.exports = crtMgr;